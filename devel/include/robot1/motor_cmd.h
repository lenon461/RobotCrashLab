// Generated by gencpp from file robot1/motor_cmd.msg
// DO NOT EDIT!


#ifndef ROBOT1_MESSAGE_MOTOR_CMD_H
#define ROBOT1_MESSAGE_MOTOR_CMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot1
{
template <class ContainerAllocator>
struct motor_cmd_
{
  typedef motor_cmd_<ContainerAllocator> Type;

  motor_cmd_()
    : motor_id(0)
    , motor_onoff(false)
    , motor_desired_direction(false)
    , motor_desired_rpm(0)
    , motor_desired_angle(0)  {
    }
  motor_cmd_(const ContainerAllocator& _alloc)
    : motor_id(0)
    , motor_onoff(false)
    , motor_desired_direction(false)
    , motor_desired_rpm(0)
    , motor_desired_angle(0)  {
  (void)_alloc;
    }



   typedef int8_t _motor_id_type;
  _motor_id_type motor_id;

   typedef uint8_t _motor_onoff_type;
  _motor_onoff_type motor_onoff;

   typedef uint8_t _motor_desired_direction_type;
  _motor_desired_direction_type motor_desired_direction;

   typedef int32_t _motor_desired_rpm_type;
  _motor_desired_rpm_type motor_desired_rpm;

   typedef int32_t _motor_desired_angle_type;
  _motor_desired_angle_type motor_desired_angle;





  typedef boost::shared_ptr< ::robot1::motor_cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot1::motor_cmd_<ContainerAllocator> const> ConstPtr;

}; // struct motor_cmd_

typedef ::robot1::motor_cmd_<std::allocator<void> > motor_cmd;

typedef boost::shared_ptr< ::robot1::motor_cmd > motor_cmdPtr;
typedef boost::shared_ptr< ::robot1::motor_cmd const> motor_cmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot1::motor_cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot1::motor_cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot1

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'robot1': ['/home/group1/catkin_ws/src/donation_bot/robot1/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot1::motor_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot1::motor_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot1::motor_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot1::motor_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot1::motor_cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot1::motor_cmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot1::motor_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e39fb850cd33bf75c7d2d2cb00151e67";
  }

  static const char* value(const ::robot1::motor_cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe39fb850cd33bf75ULL;
  static const uint64_t static_value2 = 0xc7d2d2cb00151e67ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot1::motor_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot1/motor_cmd";
  }

  static const char* value(const ::robot1::motor_cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot1::motor_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 motor_id\n\
\n\
bool motor_onoff\n\
bool  motor_desired_direction \n\
int32 motor_desired_rpm\n\
int32 motor_desired_angle\n\
\n\
";
  }

  static const char* value(const ::robot1::motor_cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot1::motor_cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motor_id);
      stream.next(m.motor_onoff);
      stream.next(m.motor_desired_direction);
      stream.next(m.motor_desired_rpm);
      stream.next(m.motor_desired_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot1::motor_cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot1::motor_cmd_<ContainerAllocator>& v)
  {
    s << indent << "motor_id: ";
    Printer<int8_t>::stream(s, indent + "  ", v.motor_id);
    s << indent << "motor_onoff: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_onoff);
    s << indent << "motor_desired_direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_desired_direction);
    s << indent << "motor_desired_rpm: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor_desired_rpm);
    s << indent << "motor_desired_angle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.motor_desired_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT1_MESSAGE_MOTOR_CMD_H
